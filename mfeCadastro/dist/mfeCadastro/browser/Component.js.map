{
  "version": 3,
  "sources": ["../../../src/app/components/pages/user/new-user.ts", "../../../src/app/components/pages/user/new-user.html", "../../../src/app/services/user/user-service.ts", "../../../src/environments/environments.ts", "../../../src/app/services/user/user-config.ts"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { UserService } from '../../../services/user/user-service';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-new-user',\r\n  imports: [ReactiveFormsModule],\r\n  templateUrl: './new-user.html',\r\n  styleUrl: './new-user.scss'\r\n})\r\nexport class NewUser {\r\n\r\n  public userForm: FormGroup;\r\n\r\n  constructor(private formBuilder: FormBuilder, private userService: UserService, private router: Router, private toastr: ToastrService) {\r\n    this.userForm = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]]\r\n    });\r\n  }\r\n\r\n  public addUser() {\r\n    this.userService.createUser(this.userForm.value)\r\n      .subscribe\r\n      ((response) => {\r\n        this.toastr.success('Usuário cadastrado com sucesso!', 'Success');\r\n        this.router.navigate([\"/mfeSucesso\"]);\r\n      });\r\n  }\r\n\r\n  public onSubmit() {\r\n    if (this.userForm.valid) {\r\n      this.addUser();\r\n    }\r\n  }\r\n}\r\n", "<div class=\"card\">\r\n    <h1 class=\"sub-title\">Novo Usuário</h1>\r\n    <form class=\"form\" [formGroup]=\"userForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-item\">\r\n            <label for=\"name\">Nome:</label>\r\n            <input type=\"text\" id=\"name\" formControlName=\"name\">\r\n        </div>\r\n        <div class=\"form-item\">\r\n            <label for=\"email\">E-mail:</label>\r\n            <input type=\"email\" id=\"email\" formControlName=\"email\">\r\n        </div>\r\n        <div class=\"form-actions\">\r\n            <button class=\"btn btn-primary\" (click)=\"userForm.reset()\">Limpar</button>\r\n            <button class=\"btn btn-sucess\" type=\"submit\" [disabled]=\"userForm.invalid\">Salvar</button>\r\n        </div>\r\n    </form>\r\n</div>", "import { Injectable } from '@angular/core';\r\nimport { userURIs } from \"../user/user-config\";\r\nimport { catchError, Observable, throwError } from 'rxjs';\r\nimport { User } from '../../domain/user/user.model';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  \r\n  constructor(private httpClient: HttpClient, private toastr: ToastrService){}\r\n\r\n  public createUser(user: User): Observable<any>{\r\n    return this.httpClient.post(userURIs.userList, user).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  public handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.error('Houve um erro:', error.error.message);\r\n    } else {\r\n      console.error(`status: ${error.status}, ` + `descrição: ${error.error}`);\r\n    }\r\n    return throwError(() => new Error('Algum erro aconteceu, tente novamente mais tarde!'));\r\n  }\r\n}\r\n", "export const environment = {\r\n    production: false,\r\n    jsonserver_host: \"http://localhost:3000\"\r\n}", "import { environment } from \"../../../environments/environments\";\r\n\r\nexport const userURIs = {\r\n    userList: `${environment.jsonserver_host}/users`\r\n}"],
  "mappings": "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",
  "names": []
}
